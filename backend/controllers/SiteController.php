<?php
namespace backend\controllers;

use backend\models\Stmt;
use common\models\User;
use Yii;
use yii\filters\AccessControl;
use yii\web\Controller;
use common\models\LoginForm;
use yii\filters\VerbFilter;

/**
 * Site controller
 */
class SiteController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['login', 'soap', 'error'],
                        'allow' => true,
                    ],
                    [
                        'actions' => ['logout', 'index'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            //  SOAP
            'soap' => [
                'class' => 'mongosoft\soapserver\Action',
                'serviceOptions' => [
                    'disableWsdlMode' => true,
                ]
            ]
        ];
    }

//    public function beforeAction($action)
//    {
//        $this->transferUserByRole();
//        return parent::beforeAction($action); // TODO: Change the autogenerated stub
//    }

    public function actionIndex()
    {
        return $this->transferUserByRole();
    }

    public function actionLogin()
    {
        $this->layout = 'login';
        if (!\Yii::$app->user->isGuest) {
            return $this->goHome();
        }

        $model = new LoginForm();
        $browser = $this->changeBrowser();

        if ($model->load(Yii::$app->request->post()) && $model->login()) {
            /* Функция определения роли */
            $this->transferUserByRole();
           // return $this->redirect(\Yii::$app->urlManager->createUrl("user/stmt/index"));
        } else {
            return $this->render('login', [
                'model' => $model,
                'browser' => $browser
            ]);
        }
    }

    public function actionLogout()
    {
        Yii::$app->user->logout();

        return $this->goHome();
    }

    public function transferUserByRole()
    {
        $role = key(Yii::$app->authManager->getRolesByUser(Yii::$app->user->id));
        if(empty($role))
            return false;

        $first = array("Оператор 1-го уровня", "Страховой представитель 1-го уровня");
        $second = array("Оператор 2-го уровня", "Оператор 2-го уровня с правами администратора",
            "Страховой представитель 2-го уровня", "Страховой представитель 2-го уровня (администратор)",
            "Страховой представитель 3-го уровня");

        switch ($role) {
            case "Администратор безопасности":
                return $this->redirect(\Yii::$app->urlManager->createUrl("admin-security/index"));
                break;
            case in_array($role, $first):
                return $this->redirect(\Yii::$app->urlManager->createUrl("user/stmt/index"));
                break;
            case in_array($role, $second):
                return $this->redirect(\Yii::$app->urlManager->createUrl("user/stmt/index"));
                break;
            case "Администратор контакт-центра":
                return $this->redirect(\Yii::$app->urlManager->createUrl("moderator/index"));
                break;
            default:
                return false;
                break;
        }
    }

    public function changeBrowser(){
        $user_agent = $_SERVER["HTTP_USER_AGENT"];

        switch (true) {
            case strpos($user_agent, "Firefox"):
                $browser = "Mozila Firefox";
                break;
            case strpos($user_agent, "Opera"):
                $browser = "Opera";
                break;
            case strpos($user_agent, "Chrome"):
                $browser = "Google Chrome";
                break;
            case strpos($user_agent, "MSIE"):
                $browser = "Internet Explorer";
                break;
            case strpos($user_agent, "Safari"):
                $browser = "Safari";
                break;
            default:
                $browser = "Не определен";
        }

        return $browser;
    }

    /**
     * @return string
     * @soap
     */
    public function getIndex()
    {
        return 100;
    }

    /**
     * @return array
     * @soap
     */
    public function getReportByDays()
    {
        $sql = 'select 
            dateadd(DAY,0, datediff(day,0, s.statement_date)) as day,
            count(case when company = 1 then \'\' end) as tfoms,
            count(case when company = 2 then \'\' end) as vtb,
            count(case when company = 3 then \'\' end) as ingos
            FROM stmt as s
                where user_o NOT IN (44, 47) and status NOT IN (0, 6)
                group by dateadd(DAY,0, datediff(day,0, s.statement_date))
                order by day ASC';

        $items = Stmt::findBySql($sql)->asArray()->all();
        $res = array();

        foreach($items as $k => $item)
        {
            //   $res['tfoms']['name'] = 'tfoms';
            $res['tfoms'][$k][] = ((int) Yii::$app->formatter->format($item['day'], 'timestamp') + 10800) * 1000;
            $res['tfoms'][$k][] = (int) $item['tfoms'];

            //   $res['vtb']['name'] = 'vtb';
            $res['vtb'][$k][] = ((int) Yii::$app->formatter->format($item['day'], 'timestamp') + 10800) * 1000;
            $res['vtb'][$k][] = (int) $item['vtb'];

            //    $res['ingos']['name'] = 'ingos';
            $res['ingos'][$k][] = ((int) Yii::$app->formatter->format($item['day'], 'timestamp') + 10800) * 1000;
            $res['ingos'][$k][] = (int) $item['ingos'];

            $res['dt'][] = ((int) Yii::$app->formatter->format($item['day'], 'timestamp') + 10800) * 1000;
        }

        return $res;
    }

    /**
     * @return array
     * @soap
     */
    public function getReportTotal()
    {

        $sql = 'SELECT  
            COUNT(case when s.tip_statement = 1 then \'\' end) as "Жалобы",
            COUNT(case when s.tip_statement = 2 then \'\' end) as "Консультации", 
            COUNT(case when s.tip_statement = 3 then \'\' end) as "Заявления", 
            COUNT(case when s.tip_statement = 4 then \'\' end) as "Предложения"
                                                
            FROM call.dbo.stmt s
              LEFT OUTER JOIN dbo.mn_group_statement mgs ON s.tip_statement = mgs.id
              WHERE user_o NOT IN (44, 47) and status NOT IN (0, 6)
              ';

        $data = Stmt::findBySql($sql)->asArray()->all();
        $res = array();
        $i = 0;
        foreach ($data[0]  as $k => $item)
        {
            $res[$i][] = $k;
            $res[$i][] = (int)$item;
            $i++;
        }

        return $res;
    }

    /**
     * @return array
     * @soap
     */
    public function getTotal()
    {
        $sql = 'SELECT              
            COUNT(case when s.company = 1 then \'\' end) as "ТФОМС",
            COUNT(case when s.company = 2 then \'\' end) as "ВТБ",
            COUNT(case when s.company = 3 then \'\' end) as "Ингосстрах-М"
                                    
            FROM call.dbo.stmt s
              LEFT OUTER JOIN dbo.mn_group_statement mgs ON s.tip_statement = mgs.id
              WHERE user_o NOT IN (44, 47) and status NOT IN (0, 6)
              ';

        return  Stmt::findBySql($sql)->asArray()->all();
    }
}
