<?php

namespace backend\models;

use app\models\StmtRelate;
use backend\components\Helpers;
use Yii;
use yii\behaviors\AttributeBehavior;
use yii\db\ActiveRecord;
use yii\helpers\ArrayHelper;
use yii\web\NotFoundHttpException;

/**
 * This is the model class for table "stmt".
 *
 * @property integer $id
 * @property integer $statement
 * @property string $statement_date
 * @property integer $tip_statement
 * @property integer $form_statement
 * @property integer $plaint
 * @property integer $stage_statement
 * @property string $theme_statement
 * @property string $theme_statement_description
 * @property string $expired
 * @property integer $company
 * @property integer $user_o
 * @property string $status
 * @property string $res_msg
 * @property string $cash_back
 * @property integer $mo
 * @property string $date_send
 */
class Stmt extends ActiveRecord
{
    public $anon_user;
    public $result;

    /* Переменные для графиков на сайте ТФОМС СК */

    // График по дням
    public $day;
    public $tfoms;
    public $ingos;
    public $vtb;

    //График общий
    public $tip_id;
    public $tip_name;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'stmt';
    }

    public function afterFind()
    {
 //       parent::afterFind(); // TODO: Change the autogenerated stub
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        return [
            [
                'class' => AttributeBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['statement_date'],
                ],
                'value' => function ($event) {
                    return date('Y-m-d H:i:s');
                },
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['statement', 'tip_statement', 'theme_statement'], 'required'],
            [['statement', 'tip_statement', 'form_statement', 'plaint', 'stage_statement', 'company', 'user_o', 'mo'], 'integer'],
            [['statement_date', 'date_send', 'expired'], 'safe'],
            [['theme_statement', 'theme_statement_description', 'status', 'res_msg', 'cash_back'], 'string'],
            [['tip_statement'], 'checkPlaint', 'on' => 'close-stmt']
        ];
    }

    /**
     * Проверка (тип жалобы)
     * @param $attribute
     * @param $params
     * @throws NotFoundHttpException
     */
    public function checkPlaint($attribute, $params)
    {
        if($this->$attribute == 1 && !isset($this->plaint))
        {
           throw new NotFoundHttpException('10');
        }
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'statement' => 'Вид обращения',
            'statement_date' => 'Дата обращения',
            'tip_statement' => 'Тип обращения',
            'form_statement' => 'Форма обращения',
            'plaint' => 'Тип жалобы',
            'stage_statement' => 'Этап Обращения',
            'theme_statement' => 'Тема обращения',
            'theme_statement_description' => 'Краткое описание',
            'expired' => 'Исполнить до',
            'company' => 'Обращение принято',
            'user_o' => 'Исполнитель',
            'status' => 'Статус',
            'res_msg' => 'Описание принятых мер',
            'cash_back' => 'Cash Back',
            'mo' => 'Mo',
            'date_send' => 'Дата ответа ЗЛ',
        ];
    }

    /**
     * Тип обращения
     * @return \yii\db\ActiveQuery
     */
    public function getGroup()
    {
        return $this->hasOne(MnGroupStatement::className(), ['id' => 'tip_statement']);
    }

    /**
     * Тема обращения
     * @return \yii\db\ActiveQuery
     */
    public function getTheme()
    {
        return $this->hasOne(MnStatement::className(), ['key_statement' => 'theme_statement']);
    }

    /**
     * Вид обращения
     * @return \yii\db\ActiveQuery
     */
    public function getSend()
    {
        return $this->hasOne(MnSendStatement::className(), ['id' => 'statement']);
    }

    /**
     * Статусы
     * @return \yii\db\ActiveQuery
     */
    public function getStmt_status()
    {
        return $this->hasOne(MnStatementStatus::className(), ['id' => 'status']);
    }

    /**
     * Информация о звонке
     * @return \yii\db\ActiveQuery
     */
    public function getCall()
    {
        return $this->hasOne(StmtCall::className(), ['stmt_id' => 'id'])->with(['callUID']);
    }

    /**
     * Информация о звонке
     * @return \yii\db\ActiveQuery
     */
    public function getCall_first()
    {
        return $this->hasOne(StmtCall::className(), ['stmt_id' => 'id']);
//            ->where(['send_user' => null]);
    }

    /**
     * Информация о звонке
     * @return \yii\db\ActiveQuery
     */
    public function getCall_second()
    {
        return $this->hasOne(StmtCall::className(), ['stmt_id' => 'id']);
//            ->where(['not',['send_user'=>null]]);
    }

    /**
     * Информация о действиях оператора 1-го уровня
     * @return $this
     */
    public function getAction()
    {
        return $this->hasOne(StmtAction::className(), ['stmt_id' => 'id'])
            ->joinWith(['action_name'])
            ->where(['user_id' => Yii::$app->user->id])
            ->orderBy(['action_date' => SORT_DESC, 'id' => SORT_DESC]);
    }

    /**
     * Информация о последнем действиии
     * @return $this
     */
    public function getActions()
    {
        return $this->hasOne(StmtAction::className(), ['stmt_id' => 'id'])
            ->with(['action_name'])
            ->orderBy(['action_date' => SORT_DESC, 'id' => SORT_DESC]);
    }

    /**
     * Закрытое обращение
     * @return $this
     */
    public function getResult()
    {
        return $this->hasOne(StmtAction::className(), ['stmt_id' => 'id'])
            ->with(['action_name'])
            ->orderBy(['action_date' => SORT_DESC, 'id' => SORT_DESC]);
    }

    /**
     * Информация о всех действиях
     * @return $this
     */
    public function getAllactions()
    {
        return $this->hasMany(StmtAction::className(), ['stmt_id' => 'id'])
            ->with(['action_name', 'user'])
            ->orderBy(['action_date' => SORT_ASC, 'id' => SORT_ASC]);
    }

    /**
     * Информация "Этап обращения"
     * @return \yii\db\ActiveQuery
     */
    public function getStage()
    {
        return $this->hasOne(MnStatementStage::className(), ['id' => 'stage_statement']);
    }

    /**
     * Информация "Этап обращения"
     * @return \yii\db\ActiveQuery
     */
    public function getSstu()
    {
        return $this->hasOne(StmtSstu::className(), ['stmt_id' => 'id']);
    }

    /**
     * Информация "Файлы прикрепленные"
     * @return \yii\db\ActiveQuery
     */
    public function getAttachment()
    {
        return $this->hasMany(StmtAttachment::className(), ['stmt_id' => 'id']);
    }

    /**
     * Информация "Связанные обращения"
     * @return \yii\db\ActiveQuery
     */
    public function getRelated()
    {
        return $this->hasMany(StmtRelate::className(),['stmt_id' => 'id'])
            ->with(['stmt_rel']);
    }

    /**
     * Информация "Отсроченный ответ"
     * @return \yii\db\ActiveQuery
     */
    public function getDeffered()
    {
        return $this->hasOne(StmtDeffered::className(), ['stmt_id' => 'id']);
    }

    /**
     * Информация "Пользователь"
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(Login::className(), ['id' => 'user_o']);
    }
    
    /**
     * Название организации
     * @return \yii\db\ActiveQuery
     */
    public function getCompany(){
        return $this->hasOne(MnCompany::className(), ['id' => 'company']);
    }

    /**
     * Название организации
     * @return \yii\db\ActiveQuery
     */
    public function getOrg(){
        return $this->hasOne(MnCompany::className(), ['id' => 'company']);
    }

    /**
     * Название филиала или доп. офиса
     * @return \yii\db\ActiveQuery
     */
    public function getOperator(){
        return $this->hasOne(Login::className(), ['id' => 'user_o'])->with(['sub']);
    }

    /**
     * Взимание денежных средств
     * @return \yii\db\ActiveQuery
     */
    public function getCollection()
    {
        return $this->hasOne(StmtCollection::className(), ['stmt_id' => 'id']);
    }

    /**
     *
     * @return \yii\db\ActiveQuery
     */
    public function getTransfer()
    {
        return $this->hasOne(StmtTransfer::className(), ['stmt_id' => 'id']);
    }

    /**
     * Close Stmt
     * @return \yii\db\ActiveQuery
     */
    public function getClose()
    {
        return $this->hasOne(StmtAction::className(), ['stmt_id' => 'id'])->where(['IN', 'action', [5, 6, 7]])->orderBy(['stmt_action.id' => SORT_DESC]);
    }

    /**
     * Создание обращения оператором 1-го уровня
     * @param $request
     * @return Stmt
     */
    public static function createCallStmt($request)
    {
        $new_stmt = new Stmt();
        $date =  new \DateTime();

        $new_stmt->statement = 2;   // Обращение через Контакт-центр
        $new_stmt->statement_date = Yii::$app->formatter->asDatetime($date);
        $new_stmt->expired = Yii::$app->formatter->asDate($date->add(new \DateInterval('P30D')));
        $new_stmt->tip_statement = isset($request->tip_statement)?$request->tip_statement:'';
        $new_stmt->stage_statement = isset($request->stage_statement)?$request->stage_statement:'';
        $new_stmt->theme_statement = isset($request->theme_statement->key_statement)?$request->theme_statement->key_statement:'';
        $new_stmt->theme_statement_description = isset($request->theme_statement_description)?$request->theme_statement_description:'';
        $new_stmt->company = MnCompany::getOrg()->org->id;
        $new_stmt->user_o = Yii::$app->user->id;
        $new_stmt->status = !empty($request->defer->def)?'5':'1';

        $new_stmt->save();
        return $new_stmt;
    }

    /**
     * Обновление обращения оператором 1-го уровня
     * @param $request
     * @return Stmt
     */
    public static function updateCallStmt($request)
    {
        $new_stmt = Stmt::findOne($request->id);

        $new_stmt->tip_statement = isset($request->tip_statement)?$request->tip_statement:'';
        $new_stmt->plaint = isset($request->plaint)?$request->tip_statement:null;
        $new_stmt->res_msg = isset($request->data->accept_msg)?$request->data->accept_msg:'';
        $new_stmt->theme_statement = isset($request->theme->key_statement)?$request->theme->key_statement:$request->theme_statement;
        $new_stmt->theme_statement_description = isset($request->theme_statement_description)?$request->theme_statement_description:'';

        $new_stmt->update();
        return $new_stmt;
    }

    /**
     * Добавление записи в ЭЖ оператором 2-го уровня
     * @param $request
     * @return Stmt
     */
    public function createStmtSecond($request)
    {
        $new_stmt = new Stmt();
        $date =  new \DateTime();

        $new_stmt->statement = $request->statement->id;   // Обращение через Контакт-центр
        $new_stmt->statement_date = Yii::$app->formatter->asDatetime($date);
        $new_stmt->expired = Yii::$app->formatter->asDate($date->add(new \DateInterval('P30D')));
        $new_stmt->tip_statement = isset($request->tip_statement)?$request->tip_statement:'';
        $new_stmt->form_statement = isset($request->form)?$request->form:'';
        $new_stmt->stage_statement = isset($request->stage_statement)?$request->stage_statement:'';
        $new_stmt->theme_statement = isset($request->theme_statement->key_statement)?$request->theme_statement->key_statement:'';
        $new_stmt->theme_statement_description = $request->theme_statement_description;
        $new_stmt->user_o = isset($request->transfer)?$request->transfer->user->id:Yii::$app->user->id;
        $new_stmt->company = Login::getCompanyUser(Yii::$app->user->id)->company;
        $new_stmt->status = '1'; // Статус «в работе»

        if($new_stmt->save())
            return $new_stmt;

        return false;
    }

    public function createStmt()
    {
        $model = new Stmt();
        $date =  new \DateTime();

        $model->statement = $this->statement;
        $model->statement_date = Yii::$app->formatter->asDatetime($date->format('d-m-Y H:i:s'));
        $model->expired = Yii::$app->formatter->asDate($date->add(new \DateInterval('P30D'))->format('d-m-Y'));
        $model->tip_statement = $this->tip_statement;
        $model->stage_statement = $this->stage_statement;
        $model->theme_statement = $this->theme_statement;
        $model->theme_statement_description = $this->theme_statement_description;
        $model->status = '1';

        $model->save();
        return $model;
    }

    /**
     * Обновление ответственного оператора
     */
    public static function updateUser_o($id, $user, $status = false)
    {
        $model = Stmt::findOne($id);

        $model->user_o = $user;
        $model->status = $status;

        $model->update();
    }

    /**
     * Закрытие обращения
     */
    public static function closeStmt($id, $status, $expired = false, $stmt = false)
    {
        $model = self::findOne($id);

        $model->status = $status;

        if($stmt['date_send'])
            $model->date_send = $stmt['date_send'];

        if($stmt['$expired'])
            $model->expired =  $stmt['$expired'];;

         $model->update();
    }

    public static function returnStmt($id, $status, $user_o)
    {
        $model = self::findOne($id);

        $model->status = $status;
        $model->user_o = $user_o;

        $model->update();
    }

    public static function reportTotals ($company, $start, $end)
    {
        $res = Stmt::find()
            ->select([
                'stmt.theme_statement',
                'COUNT(case when stmt.company = 1 AND stmt.form_statement = 0 then \'\' end) as \'t-voice\'',
                'COUNT(case when stmt.company = 1 AND stmt.form_statement = 1 then \'\' end) as \'t-write\'',
                'COUNT(case when stmt.company = 1 then \'\' end) as \'t-total\'',

                'COUNT(case when stmt.company = '. $company .' AND stmt.form_statement = 0 then \'\' end) as \'smo-voice\'',
                'COUNT(case when stmt.company = '. $company .' AND stmt.form_statement = 1 then \'\' end) as \'smo-write\'',
                'COUNT(case when stmt.company = '. $company .' then \'\' end) as \'smo-total\'',
                'mn_statement.k',
                'COUNT(id) AS total'])
            ->where(['between', 'statement_date', $start, $end])
            ->andWhere(['company' => $company ])
            ->andWhere(['=', 'status', 3])
            ->joinWith(['theme'])
            ->groupBy(['stmt.theme_statement', 'mn_statement.k'])
            ->asArray()
            ->all();

        return $res;
    }

    public static function reportTotalCalls ($company, $start, $end)
    {
        $res = Stmt::find()
            ->select([
                'COUNT(case when stmt.company = 1 AND stmt.form_statement = 0 then \'\' end) as \'t-voice\'',
                'COUNT(case when stmt.company = 1 AND stmt.form_statement = 1 then \'\' end) as \'t-write\'',
                'COUNT(case when stmt.company = 1 then \'\' end) as \'t-total\'',

                'COUNT(case when stmt.company = '. $company .' AND stmt.form_statement = 0 then \'\' end) as \'smo-voice\'',
                'COUNT(case when stmt.company = '. $company .' AND stmt.form_statement = 1 then \'\' end) as \'smo-write\'',
                'COUNT(case when stmt.company = '. $company .' then \'\' end) as \'smo-total\'',
                'COUNT(id) AS total'
            ])
            ->where(['between', 'statement_date', $start, $end])
            ->andWhere(['company' => $company])
           // ->andWhere(['statement' => 2])
            ->andWhere(['=', 'status', 3])
            ->joinWith(['theme'])
            ->asArray()
            ->all();

        return $res;
    }

    public static function reportTotalSend ($company, $start, $end)
    {
        $res = self::find()
            ->select([
                'COUNT(case when stmt.company = 1 AND stmt.form_statement = 0 then \'\' end) as \'t-voice\'',
                'COUNT(case when stmt.company = 1 AND stmt.form_statement = 1 then \'\' end) as \'t-write\'',
                'COUNT(case when stmt.company = 1 then \'\' end) as \'t-total\'',

                'COUNT(case when stmt.company = '. $company .' AND stmt.form_statement = 0 then \'\' end) as \'smo-voice\'',
                'COUNT(case when stmt.company = '. $company .' AND stmt.form_statement = 1 then \'\' end) as \'smo-write\'',
                'COUNT(case when stmt.company = '. $company .' then \'\' end) as \'smo-total\'',
                'COUNT(id) AS total'
            ])
            ->where(['between', 'statement_date', $start, $end])
            ->andWhere(['company' => $company])
            ->andWhere(['!=', 'statement', 2])
            ->andWhere(['=', 'status', 3])
            ->joinWith(['theme'])
            ->asArray()
            ->all();

        return $res;
    }

    public static function reportPlaints ($company, $start, $end)
    {
        $res = self::find()
            ->select([
                'COUNT(case when stmt.company = 1 AND stmt.form_statement = 0 then \'\' end) as \'t-voice\'',
                'COUNT(case when stmt.company = 1 AND stmt.form_statement = 1 then \'\' end) as \'t-write\'',
                'COUNT(case when stmt.company = 1 then \'\' end) as \'t-total\'',

                'COUNT(case when stmt.company = '. $company .' AND stmt.form_statement = 0 then \'\' end) as \'smo-voice\'',
                'COUNT(case when stmt.company = '. $company .' AND stmt.form_statement = 1 then \'\' end) as \'smo-write\'',
                'COUNT(case when stmt.company = '. $company .' then \'\' end) as \'smo-total\'',
                'COUNT(id) AS total'
            ])
            ->where(['between', 'statement_date', $start, $end])
            ->andWhere(['company' => $company])
            ->andWhere(['=', 'tip_statement', 1])
            ->andWhere(['=', 'status', 3])
            ->joinWith(['theme'])
            ->asArray()
            ->all();

        return $res;
    }

    /**
     * Данные для отчета
     * @param $range
     * @return array|\yii\db\ActiveRecord[]
     */
    public function dataReport($range)
    {
        $range = json_decode($range);

        $start = $range->startDate;
        $end = $range->endDate;

        $userRole = Login::getTypeUser(Yii::$app->user->id);

        switch ($userRole) {
            case 1:
                $model = Stmt::find()
                    ->where(['between', 'statement_date', $start, $end])
                    ->andWhere(['user_o' => Yii::$app->user->id])
                    ->joinWith(['user'])
                    ->asArray()
                    ->all();
                return $model;
                break;
            case 2:
                $model = Stmt::reportTotals(Login::companyID(Yii::$app->user->id), $start, $end);
                $calls = Stmt::reportTotalCalls(Login::companyID(Yii::$app->user->id), $start, $end);
                $send = Stmt::reportTotalSend(Login::companyID(Yii::$app->user->id), $start, $end);
                $plaints = Stmt::reportPlaints(Login::companyID(Yii::$app->user->id), $start, $end);

                $model = ArrayHelper::index($model, 'k');
                $model['1.1'] = array_shift($calls);
                $model['1.2'] = array_shift($send);
                $model['2'] = array_shift($plaints);

                return $model;
                break;
            default:
                $model = Stmt::find()
                    ->where(['between', 'statement_date', $start, $end])
                    ->andWhere(['user_o' => Yii::$app->user->id])
                    ->joinWith(['user'])
                    ->asArray()
                    ->all();
                return $model;
        }
    }

    /**
     * Таблица 1.1
     * @param $request
     */
    public function generateExcelReport($request, $range)
    {
        // Выравнивание про центру
        $al_center = array(
            'alignment' => array(
                'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            )
        );
        // Выранивание по правому краю
        $al_right = array(
            'alignment' => array(
                'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
            )
        );
        // выравнивание по середине и левому краю
        $al_center = array(
            'alignment' => array(
                'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                'velrtical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
            )
        );

        $allBorder = array(
            'borders' => array(
                'allborders' => array(
                    'style' => \PHPExcel_Style_Border::BORDER_THIN
                )
            )
        );

        $outlineBorder = array(
            'borders' => array(
                'outline' => array(
                    'style' => \PHPExcel_Style_Border::BORDER_MEDIUM
                )
            )
        );
        $objPHPExcel = new \PHPExcel();

        $sheet=0;

        $objPHPExcel->setActiveSheetIndex($sheet);

        //Ориентация страницы и  размер листа
        $objPHPExcel->getActiveSheet()->getPageSetup()
            ->setOrientation(\PHPExcel_Worksheet_PageSetup::ORIENTATION_PORTRAIT);
        $objPHPExcel->getActiveSheet()->getPageSetup()
            ->setPaperSize(\PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);

        //Поля документа
        $objPHPExcel->getActiveSheet()
            ->getPageMargins()->setTop(0.5);
        $objPHPExcel->getActiveSheet()
            ->getPageMargins()->setRight(0.25);
        $objPHPExcel->getActiveSheet()
            ->getPageMargins()->setLeft(0.75);
        $objPHPExcel->getActiveSheet()
            ->getPageMargins()->setBottom(0.5);

        $objPHPExcel->getActiveSheet()->setTitle('Таблица 1.1');
        $objPHPExcel->getActiveSheet()->getStyle("A1:I40")->getFont()->setSize(9);

        $objPHPExcel->getActiveSheet()->mergeCells('A1:I1')->getStyle('A1:I1')->applyFromArray($al_center);
        $objPHPExcel->getActiveSheet()->setCellValue('A1', 'ОБРАЩЕНИЯ ЗАСТРАХОВАННЫХ ЛИЦ')
            ->getStyle()->getFont()->setSize(12);



        $objPHPExcel->getActiveSheet()->mergeCells('A2:I2')->getStyle('A2:I2')->applyFromArray($al_right);
        $objPHPExcel->getActiveSheet()->setCellValue('A2', 'Таблица 1.1');

        $objPHPExcel->getActiveSheet()->mergeCells('A3:A5');
        $objPHPExcel->getActiveSheet()->mergeCells('B3:B5')->getStyle('B3:B5')->getAlignment()->setWrapText(true);
        $objPHPExcel->getActiveSheet()->mergeCells('C3:I3');
        $objPHPExcel->getActiveSheet()->mergeCells('C4:E4');
        $objPHPExcel->getActiveSheet()->mergeCells('F4:H4');
        $objPHPExcel->getActiveSheet()->mergeCells('I4:I5');

        $objPHPExcel->getActiveSheet()->setCellValue('A3', 'Виды обращений');
        $objPHPExcel->getActiveSheet()->setCellValue('B3', '№ стр.');
        $objPHPExcel->getActiveSheet()->setCellValue('C3', 'Количество поступивших обращений за отчетный период');
        $objPHPExcel->getActiveSheet()->setCellValue('C4', 'ТФОМС');
        $objPHPExcel->getActiveSheet()->setCellValue('F4', 'СМО');
        $objPHPExcel->getActiveSheet()->setCellValue('I4', 'ИТОГО');
        $objPHPExcel->getActiveSheet()->setCellValue('C5', 'устных');
        $objPHPExcel->getActiveSheet()->setCellValue('D5', 'письменных');
        $objPHPExcel->getActiveSheet()->setCellValue('E5', 'всего');
        $objPHPExcel->getActiveSheet()->setCellValue('F5', 'устных');
        $objPHPExcel->getActiveSheet()->setCellValue('G5', 'письменных');
        $objPHPExcel->getActiveSheet()->setCellValue('H5', 'всего');

        $objPHPExcel->getActiveSheet()->setCellValue('A6', '1');
        $objPHPExcel->getActiveSheet()->setCellValue('B6', '2');
        $objPHPExcel->getActiveSheet()->setCellValue('C6', '3');
        $objPHPExcel->getActiveSheet()->setCellValue('D6', '4');
        $objPHPExcel->getActiveSheet()->setCellValue('E6', '5');
        $objPHPExcel->getActiveSheet()->setCellValue('F6', '6');
        $objPHPExcel->getActiveSheet()->setCellValue('G6', '7');
        $objPHPExcel->getActiveSheet()->setCellValue('H6', '8');
        $objPHPExcel->getActiveSheet()->setCellValue('I6', '9');

        $objPHPExcel->getActiveSheet()->getStyle('A3:I6')->getAlignment()
            ->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER)
            ->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);

        // Рамки
        $objPHPExcel->getActiveSheet()->getStyle('A3:I40')->applyFromArray($allBorder);
        $objPHPExcel->getActiveSheet()->getStyle('A6:I6')->applyFromArray($outlineBorder);
        $objPHPExcel->getActiveSheet()->getStyle('B3:B40')->applyFromArray($outlineBorder);

        $row = 7;
        $model = Stmt::getRole();
        $list = Helpers::listStmt();

        foreach ($list as $k=>$v)
        {
            $ident = substr_count($k, '.');
            $objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $v)->getStyle('A'.$row)->getAlignment()->setIndent($ident + 1);;
            $objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$row, $k, \PHPExcel_Cell_DataType::TYPE_STRING);
            /* ТФОМС */
            $objPHPExcel->getActiveSheet()->setCellValue('C'.$row, $model::getValueAll($k, array(1), $range, 0, 'C'.$row));
            $objPHPExcel->getActiveSheet()->setCellValue('D'.$row, $model::getValueAll($k, array(1), $range, 1, 'D'.$row));
            $objPHPExcel->getActiveSheet()->setCellValue('E'.$row, '=SUM('.'C'.$row.':'.'D'.$row.')');
            /* СМО */
            $objPHPExcel->getActiveSheet()->setCellValue('F'.$row, $model::getValueAll($k, array(2, 3), $range, 0, 'F'.$row));
            $objPHPExcel->getActiveSheet()->setCellValue('G'.$row, $model::getValueAll($k, array(2, 3), $range, 1, 'G'.$row));
            $objPHPExcel->getActiveSheet()->setCellValue('H'.$row, '=SUM('.'F'.$row.':'.'G'.$row.')');
            /* ИТОГО */
            $objPHPExcel->getActiveSheet()->setCellValue('I'.$row, '=SUM('.'E'.$row.'+'.'H'.$row.')');

            $row++;
        }

        $objPHPExcel->getActiveSheet()->setCellValue('C7', $model::getTotalAll(null, array(1), $range, 0,'C7'));
        $objPHPExcel->getActiveSheet()->setCellValue('D7', $model::getTotalAll(null, array(1), $range, 1,'D7'));
        $objPHPExcel->getActiveSheet()->setCellValue('F7', $model::getTotalAll(null, array(2, 3), $range, 0,'F7'));
        $objPHPExcel->getActiveSheet()->setCellValue('G7', $model::getTotalAll(null, array(2, 3), $range, 1,'G7'));

        $objPHPExcel->getActiveSheet()->setCellValue('C8', $model::getTotalAll(array(2), array(1), $range, 0,'C8'));
        $objPHPExcel->getActiveSheet()->setCellValue('D8', $model::getTotalAll(array(2), array(1), $range, 1,'D8'));
        $objPHPExcel->getActiveSheet()->setCellValue('F8', $model::getTotalAll(array(2), array(2, 3), $range, 0,'F8'));
        $objPHPExcel->getActiveSheet()->setCellValue('G8', $model::getTotalAll(array(2), array(2, 3), $range, 1,'G8'));

        $objPHPExcel->getActiveSheet()->setCellValue('C9', $model::getTotalAll(array(6, 9), array(1), $range, 0,'C9'));
        $objPHPExcel->getActiveSheet()->setCellValue('D9', $model::getTotalAll(array(6, 9), array(1), $range, 1,'D9'));
        $objPHPExcel->getActiveSheet()->setCellValue('F9', $model::getTotalAll(array(6, 9), array(2, 3), $range, 0,'F9'));
        $objPHPExcel->getActiveSheet()->setCellValue('G9', $model::getTotalAll(array(6, 9), array(2, 3), $range, 1,'G9'));

        $objPHPExcel->getActiveSheet()->setCellValue('C10', $model::getPlaintlAll(array(1), $range, 0,'C10'));
        $objPHPExcel->getActiveSheet()->setCellValue('D10', $model::getPlaintlAll(array(1), $range, 1,'D10'));
        $objPHPExcel->getActiveSheet()->setCellValue('F10', $model::getPlaintlAll(array(2, 3), $range, 0,'F10'));
        $objPHPExcel->getActiveSheet()->setCellValue('G10', $model::getPlaintlAll(array(2, 3), $range, 1,'G10'));


        $objPHPExcel->getActiveSheet()->setCellValue('C7', '= SUM(C10 + C23 + C40)' );
        $objPHPExcel->getActiveSheet()->setCellValue('D7', '= SUM(D10 + D11 + D23 + D40)' );
        $objPHPExcel->getActiveSheet()->setCellValue('F7', '= SUM(F10 + F23 + F40)' );
        $objPHPExcel->getActiveSheet()->setCellValue('G7', '= SUM(G10 + G11 + G23 + G40)' );
        $objPHPExcel->getActiveSheet()->setCellValue('D11', '= SUM(D12 + D13 + D16 + D17 + D18 + D21)' );
        $objPHPExcel->getActiveSheet()->setCellValue('D18', '= SUM(D19 + D20)' );

        $objPHPExcel->getActiveSheet()->setCellValue('G11', '= SUM(G12:G22)' );
        $objPHPExcel->getActiveSheet()->setCellValue('F23', '= SUM(F24:F39)' );
        $objPHPExcel->getActiveSheet()->setCellValue('G23', '= SUM(G24:G39)' );
        $objPHPExcel->getActiveSheet()->setCellValue('C23', '= SUM(C24:C39) - C25' );
        $objPHPExcel->getActiveSheet()->setCellValue('D23', '= SUM(D24:D39) - D25' );


        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(30);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(4.5);
        $objPHPExcel->getActiveSheet()->getColumnDimension('C')->setWidth(8);
        $objPHPExcel->getActiveSheet()->getColumnDimension('D')->setWidth(10);
        $objPHPExcel->getActiveSheet()->getColumnDimension('E')->setWidth(6);
        $objPHPExcel->getActiveSheet()->getColumnDimension('F')->setWidth(8);
        $objPHPExcel->getActiveSheet()->getColumnDimension('G')->setWidth(10);
        $objPHPExcel->getActiveSheet()->getColumnDimension('H')->setWidth(6);
        $objPHPExcel->getActiveSheet()->getColumnDimension('I')->setWidth(9);

        $objPHPExcel->getActiveSheet()->getStyle('A7:A40')->getAlignment()->setWrapText(true);
        /* выравниваем по центру (вертильно-горизонтально) */
        $objPHPExcel->getActiveSheet()
            ->getStyle('A7:A40')
            ->getAlignment()
            ->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_LEFT)
            ->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);

        $objPHPExcel->getActiveSheet()
            ->getStyle('B7:I40')
            ->getAlignment()
            ->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER)
            ->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);

        $objPHPExcel->getActiveSheet()->getStyle('B7:I40')
            ->getNumberFormat()->setFormatCode('0');

        $objPHPExcel->getActiveSheet()
            ->getStyle('A100');

        $filename = "ОБРАЩЕНИЯ_ЗАСТРАХОВАННЫХ_ЛИЦ_1_1.xls";
        ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header("Content-Disposition: attachment;filename=$filename");
        header("Pragma: no-cache");
        header("Expires: 0");
        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');
        ob_end_clean();
        Yii::$app->end();
    }

    /**
     * Таблица 1.2
     * @param $request
     */
    public function generateExcelReportPlaints($range)
    {
        // Выравнивание про центру
        $al_center = array(
            'alignment' => array(
                'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
            )
        );
        // Выранивание по правому краю
        $al_right = array(
            'alignment' => array(
                'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_RIGHT,
            )
        );
        // выравнивание по середине и левому краю
        $al_center = array(
            'alignment' => array(
                'horizontal' => \PHPExcel_Style_Alignment::HORIZONTAL_CENTER,
                'velrtical' => \PHPExcel_Style_Alignment::VERTICAL_CENTER,
            )
        );
        // Рамки
        $allBorder = array(
            'borders' => array(
                'allborders' => array(
                    'style' => \PHPExcel_Style_Border::BORDER_THIN
                )
            )
        );
        // Рамка
        $outlineBorder = array(
            'borders' => array(
                'outline' => array(
                    'style' => \PHPExcel_Style_Border::BORDER_MEDIUM
                )
            )
        );

        $model = Stmt::getRole();
        $objPHPExcel = new \PHPExcel();
        $sheet = 0;
        $objPHPExcel->setActiveSheetIndex($sheet);

        //Ориентация страницы и  размер листа
        $objPHPExcel->getActiveSheet()->getPageSetup()
            ->setOrientation(\PHPExcel_Worksheet_PageSetup::ORIENTATION_LANDSCAPE);
        $objPHPExcel->getActiveSheet()->getPageSetup()
            ->setPaperSize(\PHPExcel_Worksheet_PageSetup::PAPERSIZE_A4);

        //Поля документа
        $objPHPExcel->getActiveSheet()
            ->getPageMargins()->setTop(0.5);
        $objPHPExcel->getActiveSheet()
            ->getPageMargins()->setRight(0.25);
        $objPHPExcel->getActiveSheet()
            ->getPageMargins()->setLeft(0.75);
        $objPHPExcel->getActiveSheet()
            ->getPageMargins()->setBottom(0.5);

        $objPHPExcel->getActiveSheet()->setTitle('Таблица 1.2');
        $objPHPExcel->getActiveSheet()->getStyle("A1:N33")->getFont()->setSize(9);

        $objPHPExcel->getActiveSheet()->mergeCells('A1:N1')->getStyle('A1:N1')->applyFromArray($al_center);
        $objPHPExcel->getActiveSheet()->setCellValue('A1', 'ЖАЛОБЫ И ИХ ПРИЧИНЫ')->getStyle()->getFont()->setSize(12);

        $objPHPExcel->getActiveSheet()->mergeCells('A2:N2')->getStyle('A2:N2')->applyFromArray($al_right);
        $objPHPExcel->getActiveSheet()->setCellValue('A2', 'Таблица 1.2');

        $objPHPExcel->getActiveSheet()->mergeCells('A3:A5');
        $objPHPExcel->getActiveSheet()->mergeCells('B3:B5')->getStyle('B3:B5')->getAlignment()->setWrapText(true);
        $objPHPExcel->getActiveSheet()->mergeCells('C3:N3'); // количество жалоб
        $objPHPExcel->getActiveSheet()->mergeCells('C4:E4'); // письменных
        $objPHPExcel->getActiveSheet()->mergeCells('F4:H4'); // устных
        $objPHPExcel->getActiveSheet()->mergeCells('I4:K4'); // всего
        $objPHPExcel->getActiveSheet()->mergeCells('L4:N4'); // обоснованных
  //      $objPHPExcel->getActiveSheet()->mergeCells('I4:I5');

        $objPHPExcel->getActiveSheet()->setCellValue('A3', 'Причины жалоб');
        $objPHPExcel->getActiveSheet()->setCellValue('B3', '№ стр.');
        $objPHPExcel->getActiveSheet()->setCellValue('C3', 'Количество жалоб за отчетный период, в том числе:');
        $objPHPExcel->getActiveSheet()->setCellValue('C4', 'письменных');
        $objPHPExcel->getActiveSheet()->setCellValue('F4', 'устных');
        $objPHPExcel->getActiveSheet()->setCellValue('I4', 'всего');
        $objPHPExcel->getActiveSheet()->setCellValue('L4', 'из них обоснованых');
        $objPHPExcel->getActiveSheet()->setCellValue('C5', 'ТФОМС');
        $objPHPExcel->getActiveSheet()->setCellValue('D5', 'СМО');
        $objPHPExcel->getActiveSheet()->setCellValue('E5', 'всего');
        $objPHPExcel->getActiveSheet()->setCellValue('F5', 'ТФОМС');
        $objPHPExcel->getActiveSheet()->setCellValue('G5', 'СМО');
        $objPHPExcel->getActiveSheet()->setCellValue('H5', 'всего');
        $objPHPExcel->getActiveSheet()->setCellValue('I5', 'ТФОМС');
        $objPHPExcel->getActiveSheet()->setCellValue('J5', 'СМО');
        $objPHPExcel->getActiveSheet()->setCellValue('K5', 'всего');
        $objPHPExcel->getActiveSheet()->setCellValue('L5', 'ТФОМС');
        $objPHPExcel->getActiveSheet()->setCellValue('M5', 'СМО');
        $objPHPExcel->getActiveSheet()->setCellValue('N5', 'всего');

        $objPHPExcel->getActiveSheet()->setCellValue('A6', '1');
        $objPHPExcel->getActiveSheet()->setCellValue('B6', '2');
        $objPHPExcel->getActiveSheet()->setCellValue('C6', '3');
        $objPHPExcel->getActiveSheet()->setCellValue('D6', '4');
        $objPHPExcel->getActiveSheet()->setCellValue('E6', '5');
        $objPHPExcel->getActiveSheet()->setCellValue('F6', '6');
        $objPHPExcel->getActiveSheet()->setCellValue('G6', '7');
        $objPHPExcel->getActiveSheet()->setCellValue('H6', '8');
        $objPHPExcel->getActiveSheet()->setCellValue('I6', '9');
        $objPHPExcel->getActiveSheet()->setCellValue('J6', '10');
        $objPHPExcel->getActiveSheet()->setCellValue('K6', '11');
        $objPHPExcel->getActiveSheet()->setCellValue('L6', '12');
        $objPHPExcel->getActiveSheet()->setCellValue('M6', '13');
        $objPHPExcel->getActiveSheet()->setCellValue('N6', '14');


        $objPHPExcel->getActiveSheet()->getStyle('A3:A6')->getAlignment()
            ->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER)
            ->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);

        $objPHPExcel->getActiveSheet()->getStyle('B3:N33')->getAlignment()
            ->setHorizontal(\PHPExcel_Style_Alignment::HORIZONTAL_CENTER)
            ->setVertical(\PHPExcel_Style_Alignment::VERTICAL_CENTER);

        $row = 7;
        $c = 2; // СМО

        $list = Helpers::listReport1_2();

        foreach ($list as $k=>$v)
        {
            $ident = substr_count($k, '.');
            $objPHPExcel->getActiveSheet()->setCellValue('A'.$row, $v)->getStyle('A'.$row)->getAlignment()->setIndent($ident + 1);;
            $objPHPExcel->getActiveSheet()->setCellValueExplicit('B'.$row, str_replace('ж', '', $k), \PHPExcel_Cell_DataType::TYPE_STRING);

            /* Письменные */
            $objPHPExcel->getActiveSheet()->setCellValue('C'.$row, $model::getValuePlaint($k, array(1), $range, 1));
            $objPHPExcel->getActiveSheet()->setCellValue('D'.$row, $model::getValuePlaint($k, array(2,3), $range, 1));
            $objPHPExcel->getActiveSheet()->setCellValue('E'.$row, '=SUM('.'C'.$row.':'.'D'.$row.')');

            /* Устные */
            $objPHPExcel->getActiveSheet()->setCellValue('F'.$row, $model::getValuePlaint($k, array(1), $range, 0));
            $objPHPExcel->getActiveSheet()->setCellValue('G'.$row, $model::getValuePlaint($k, array(2,3), $range, 0));
            $objPHPExcel->getActiveSheet()->setCellValue('H'.$row, '=SUM('.'F'.$row.':'.'G'.$row.')');

            /* Всего */
            $objPHPExcel->getActiveSheet()->setCellValue('I'.$row, '=SUM('.'C'.$row.'+'.'F'.$row.')');
            $objPHPExcel->getActiveSheet()->setCellValue('J'.$row, '=SUM('.'D'.$row.'+'.'G'.$row.')');
            $objPHPExcel->getActiveSheet()->setCellValue('K'.$row, '=SUM('.'I'.$row.'+'.'J'.$row.')');

            /* Обоснованные  */
            $objPHPExcel->getActiveSheet()->setCellValue('L'.$row, $model::getValuePlaint($k, array(1), $range, null, 0));
            $objPHPExcel->getActiveSheet()->setCellValue('M'.$row, $model::getValuePlaint($k, array(2,3), $range, null, 0));
            $objPHPExcel->getActiveSheet()->setCellValue('N'.$row, '=SUM('.'L'.$row.':'.'M'.$row.')');

            $row++;
        }

        $SCell = array('C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N');
        foreach ($SCell as $cell)
        {
            $objPHPExcel->getActiveSheet()->setCellValue($cell.'7', '=SUM('.$cell.'9 + '.$cell.'10 + '.$cell.'13 + '.$cell.'14 + '.$cell.'18 + '.$cell.'19 +'
                .$cell.'20 +'.$cell.'21 +'.$cell.'22 +'.$cell.'23 +'.$cell.'24 +'.$cell.'27 +'.$cell.'28 +'.$cell.'31 +'.$cell.'32)');

            $objPHPExcel->getActiveSheet()->setCellValue($cell.'8', '=SUM('.$cell.'9 + '.$cell.'10 + '.$cell.'13 + '.$cell.'14 + '.$cell.'18 + '.$cell.'19 +'
                .$cell.'20 +'.$cell.'21 +'.$cell.'22 +'.$cell.'23 +'.$cell.'24 +'.$cell.'27 +'.$cell.'28 +'.$cell.'31 +'.$cell.'32)');

            $objPHPExcel->getActiveSheet()->setCellValue($cell.'10', '=SUM('.$cell.'11 + '.$cell.'12)');
            $objPHPExcel->getActiveSheet()->setCellValue($cell.'14', '=SUM('.$cell.'15 + '.$cell.'16 + '.$cell.'17)');
            $objPHPExcel->getActiveSheet()->setCellValue($cell.'24', '=SUM('.$cell.'25 + '.$cell.'26)');
            $objPHPExcel->getActiveSheet()->setCellValue($cell.'28', '=SUM('.$cell.'29 + '.$cell.'30)');
      //      $objPHPExcel->getActiveSheet()->setCellValue($cell.'32', '=SUM('.$cell.'33)');
        }

        // Ширина ячейки
        $objPHPExcel->getActiveSheet()->getColumnDimension('A')->setWidth(20);
        $objPHPExcel->getActiveSheet()->getColumnDimension('B')->setWidth(5);

        // Перенос по словам
        $objPHPExcel->getActiveSheet()->getStyle('A7:A33')->getAlignment()->setWrapText(true);

        // Рамки
        $objPHPExcel->getActiveSheet()->getStyle('A3:N33')->applyFromArray($allBorder);
        $objPHPExcel->getActiveSheet()->getStyle('A6:N6')->applyFromArray($outlineBorder);
        $objPHPExcel->getActiveSheet()->getStyle('B3:B33')->applyFromArray($outlineBorder);

        $filename = "ОБРАЩЕНИЯ_ЗАСТРАХОВАННЫХ_ЛИЦ_1_2.xls";
        ob_end_clean();
        header('Content-Type: application/vnd.ms-excel');
        header('Content-Disposition: attachment;filename='.$filename .' ');
        header('Cache-Control: max-age=0');
        $objWriter = \PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel5');
        $objWriter->save('php://output');
        ob_end_clean();
        Yii::$app->end();
    }

    /**
     * Сохранить таблицу 1.1
     * @param $params
     */
    public static function saveReport($params, $range)
    {
        $searchModel = new StmtSearchArchive();
        $report = new Stmt();
        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

        $model = $searchModel->searchReportTotal($params)->getModels();
        $all = $searchModel->searchReportAll($params)->getModels();
        $calls = $searchModel->searchReportTotalCalls($params)->getModels();
        $internet = $searchModel->searchReportTotalInternet($params)->getModels();
        $plaints = $searchModel->searchReportTotalPlaint($params)->getModels();

        $model = ArrayHelper::index($model, 'k');
        $model['1'] = array_shift($all);
        $model['1.1'] = array_shift($calls);
        $model['1.2'] = array_shift($internet);
        $model['2'] = array_shift($plaints);


        return $report->generateExcelReport($model, $range);
    }

    /**
     * Сохранить таблицу 1.2
     * @param $params
     */
    public static function saveReportPlaints($dateRange)
    {
        $report = new Stmt();

        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

        return $report->generateExcelReportPlaints($dateRange);
    }

    public static function reportPlaintsAdminQuery($params)
    {

    }

    /**
     * @param $dateRange
     */
    public static function savePlaintsAdmin($dateRange)
    {
        $report = new Stmt();

        Yii::$app->response->format = \yii\web\Response::FORMAT_JSON;

        return $report->generateExcelReportPlaints($dateRange);
    }

    /**
     * @param $key
     * @param $c
     * @param $range
     * @param bool $form
     * @param bool $plaint
     * @return int|string
     */
    public static function getValuePlaint($key, $c, $range, $form = null, $plaint = null)
    {
        $company =  Login::getCompanyUser(Yii::$app->user->id)->company;

        $data = Stmt::find();
        $data->joinWith(['close']);
        $data->where(['tip_statement' => 1]);
        $data->andWhere(['IN', 'status', [1, 2, 3]]);
//        $data->andWhere(['between', 'statement_date',  $range->startDate, $range->endDate]);
        $data->andWhere(['between', 'action_date',  $range->startDate, $range->endDate]);
        $data->andWhere([ 'theme_statement' => $key ]);

        if(isset($form))
            $data->andWhere([ 'form_statement' => $form ]);

        if(isset($plaint))
            $data->andWhere([ 'plaint' => $plaint ]);

        if(in_array($company, $c))
        {
            $data->andWhere(['company' => $company]);
            return count($data->asArray()->all());
        }

        return 0;
    }

    public static function getTotalAll($statement = null, $c, $range, $form, $cell)
    {
        if(in_array($cell, Helpers::stopList()))
            return 'x';

        $company =  Login::getCompanyUser(Yii::$app->user->id)->company;

        $data = Stmt::find();
        $data->joinWith(['close', 'theme']);
//        $data->where(['tip_statement' => 1]);
        $data->andWhere(['NOT IN', 'status', [0, 9]]);
        // $data->andWhere(['NOT IN', 'user_o', [44, 47]]);
//        $data->andWhere(['between', 'statement_date',  $range->startDate, $range->endDate]);
        $data->andWhere(['between', 'action_date',  $range->startDate, $range->endDate]);

        if(isset($statement))
            $data->andWhere(['IN', 'statement', $statement]);

        if(isset($form))
            $data->andWhere([ 'form_statement' => $form ]);

        if(in_array($company, $c))
        {
            $data->andWhere(['company' => $company]);
            return count($data->asArray()->all());
        }

        return 0;
    }

    public static function getPlaintlAll($c, $range, $form, $cell)
    {
        if(in_array($cell, Helpers::stopList()))
            return 'x';

        $company =  Login::getCompanyUser(Yii::$app->user->id)->company;

        $data = Stmt::find();
        $data->joinWith(['close', 'theme']);
        $data->where(['tip_statement' => 1]);
        $data->andWhere(['NOT IN', 'status', [0, 9]]);
        // $data->andWhere(['NOT IN', 'user_o', [44, 47]]);
//        $data->andWhere(['between', 'statement_date',  $range->startDate, $range->endDate]);
        $data->andWhere(['between', 'action_date',  $range->startDate, $range->endDate]);

        if(isset($form))
            $data->andWhere([ 'form_statement' => $form ]);

        if(in_array($company, $c))
        {
            $data->andWhere(['company' => $company]);
            return count($data->asArray()->all());
        }

        return 0;
    }

    public static function getValueAll($key, $c, $range, $form, $cell)
    {
        if(in_array($cell, Helpers::stopList()))
            return 'x';

        $company =  Login::getCompanyUser(Yii::$app->user->id)->company;

        $data = Stmt::find();
        $data->joinWith(['close', 'theme']);
//        $data->where(['tip_statement' => 1]);
        $data->andWhere(['NOT IN', 'status', [0, 9]]);
       // $data->andWhere(['NOT IN', 'user_o', [44, 47]]);
//        $data->andWhere(['between', 'statement_date',  $range->startDate, $range->endDate]);
        $data->andWhere(['between', 'action_date',  $range->startDate, $range->endDate]);
        $data->andWhere([ 'k' => $key ]);

        if(isset($form))
            $data->andWhere([ 'form_statement' => $form ]);

       // $data->andWhere(['company' => $company]);

        if(in_array($company, $c))
        {
            $data->andWhere(['company' => $company]);
            return count($data->asArray()->all());
        }

        return 0;
    }

    public static function getRole()
    {
        $role = Yii::$app->getUser()->identity->role_type;

        return ($role == 3)? new StmtAdmin() : new Stmt();
    }

}
